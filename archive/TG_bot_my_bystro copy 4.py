### –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (TG_bot_my_bystro.py)
import telebot
from telebot import types 
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func
import random
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –º–æ–¥–µ–ª–∏
from models import session, Category, Dish, User, Order, OrderItem, Session
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –º–æ–¥–µ–ª–∏
from dotenv import load_dotenv
import os
import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å re

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á
telegram_api_key = os.getenv('TELEGRAM_API_KEY')

# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(telegram_api_key)

# –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
image_folder = os.path.join(os.getcwd(), 'My_bistro/image')
images = [os.path.join(image_folder, f) for f in os.listdir(image_folder) if f.endswith('.jpg')]

current_quantities = {}

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_photo(message.chat.id, open(random.choice(images), 'rb'))  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_menu = telebot.types.KeyboardButton("–ú–µ–Ω—é")
    button_cart = telebot.types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞")
    button_profile = telebot.types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    
    markup.add(button_menu, button_cart, button_profile)
    
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ Menu
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def show_menu(message):
    markup = types.InlineKeyboardMarkup()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è InlineKeyboardMarkup

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    categories = session.query(Category).all()
    
    for category in categories:
        button = InlineKeyboardButton(category.name, callback_data=f'category_{category.id}')
        markup.add(button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def handle_back_to_menu(call):
    # –ó–¥–µ—Å—å –º—ã –≤—ã–∑—ã–≤–∞–µ–º show_menu –∏ –ø–µ—Ä–µ–¥–∞–µ–º call.message
    show_menu(call.message)
    
 
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def show_dishes(call):
    category_id = int(call.data.split('_')[1])
    dishes = session.query(Dish).filter(Dish.category_id == category_id).all()
    
    markup = InlineKeyboardMarkup()
    
    for dish in dishes:
        button = InlineKeyboardButton(f"{dish.name} - {dish.price:.2f}‚ÇΩ", callback_data=f'dish_{dish.id}')
        markup.add(button)
    
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=markup)


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ Dish –≤ —Ä–∞–º–∫–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã Menu
# # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (TG_bot_my_bystro.py)
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞

from sqlalchemy import func
from telebot import types

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–ª—é–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data.startswith('dish_'))
def handle_dish_call(call):
    dish_id = int(call.data.split('_')[1])
    dish = session.query(Dish).filter(Dish.id == dish_id).first()

    if dish:
        send_dish_info(call, dish)

def send_dish_info(call, dish):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ
    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    order = session.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()

    quantity = 1  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if order:
        order_item = session.query(OrderItem).filter(OrderItem.order_id == order.id, OrderItem.dish_id == dish.id).first()
        if order_item:
            quantity = order_item.quantity

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–µ
    bot.send_message(call.message.chat.id, f"{dish.name}\n{dish.description}\n\n**–¶–µ–Ω–∞: {dish.price}**", parse_mode='Markdown')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    update_quantity_markup(call.message.chat.id, call.message.message_id, dish.id, quantity)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞


def keyboard(dish_id, quantity, dish_price):
    quantity_markup = types.InlineKeyboardMarkup()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    row1 = [
        types.InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûï", callback_data=f'increase_quantity_{dish_id}'),
        types.InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûñ", callback_data=f'decrease_quantity_{dish_id}')
    ]
    quantity_markup.row(*row1)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    row2 = [
        types.InlineKeyboardButton(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {dish_price * quantity}", callback_data='dummy'),
        types.InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}", callback_data='dummy'),
        types.InlineKeyboardButton("üõí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_to_cart_{dish_id}')
    ]
    quantity_markup.row(*row2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫

    return quantity_markup

def update_quantity_markup(chat_id, message_id, dish_id, quantity):
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –±–ª—é–¥–∞
    dish = session.query(Dish).filter(Dish.id == dish_id).first()
    quantity_markup = keyboard(dish_id, quantity, dish.price)

    bot.edit_message_text("–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", chat_id=chat_id, message_id=message_id, reply_markup=quantity_markup)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('increase_quantity_'))
def increase_quantity(call):
    dish_id = int(call.data.split('_')[2])
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    current_quantities[dish_id] = current_quantities.get(dish_id, 0) + 1
    quantity = current_quantities[dish_id]

    update_quantity_markup(call.message.chat.id, call.message.message_id, dish_id, quantity)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('decrease_quantity_'))
def decrease_quantity(call):
    
    dish_id = int(call.data.split('_')[2])
    
    # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if dish_id in current_quantities and current_quantities[dish_id] > 0:
        current_quantities[dish_id] = max(0, current_quantities[dish_id] - 1)
    quantity = current_quantities.get(dish_id, 0)

    update_quantity_markup(call.message.chat.id, call.message.message_id, dish_id, quantity)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
def add_to_cart(call):

    dish_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    parts = call.data.split('_')  # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π
    if len(parts) < 3:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ dish_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if not re.match(r'^\d+$', parts[3]):
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª—é–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {parts[3]}, {parts[2]},{parts[1]},{parts[0]}")
        return
    
    dish_id = int(parts[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º dish_id –∏–∑ callback_data

    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    order = session.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()

    if not order:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    quantity = current_quantities.get(dish_id, 0)

    if quantity > 0:
        order_item = session.query(OrderItem).filter(OrderItem.order_id == order.id, OrderItem.dish_id == dish_id).first()

        if order_item:
            order_item.quantity += quantity
        else:
            order_item = OrderItem(order_id=order.id, dish_id=dish_id, quantity=quantity)
            session.add(order_item)

        session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        current_quantities[dish_id] = 0

        bot.send_message(call.message.chat.id, f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {quantity} –ø–æ—Ä—Ü–∏–π –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    else:
        bot.send_message(call.message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")

#############################################################################################################
#############################################################################################################


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ—Ä–∑–∏–Ω–∞—é"
@bot.message_handler(func=lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞")


def show_cart(message):
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    orders = session.query(Order).filter_by(user_id=user.id, status='active').first()
    if not orders:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    print (orders.id)
    order_items = session.query(OrderItem).filter_by(order_id=orders.id).all()
    total_price = 0

    markup = types.InlineKeyboardMarkup()
    
    for item in order_items:
        dish = session.query(Dish).filter_by(id=item.dish_id).first()
        if dish:
            total_price += dish.price * item.quantity
            
            # –ö–Ω–æ–ø–∫–∏ +, - –∏ –£–¥–∞–ª–∏—Ç—å
            row = [
                types.InlineKeyboardButton("+", callback_data=f"increase_{item.id}"),
                types.InlineKeyboardButton("-", callback_data=f"decrease_{item.id}"),
                types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{item.id}"),
            ]
            markup.add(*row)

            # –§–æ—Ç–æ –±–ª—é–¥–∞
            if hasattr(dish, 'photo') and dish.photo:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–µ image –≤ –º–æ–¥–µ–ª–∏ Dish
                bot.send_photo(message.chat.id, dish.image, caption=f"{dish.name}\n–¶–µ–Ω–∞: {dish.price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}")
            else:
                bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–µ–Ω–æ call –Ω–∞ message
                bot.send_message(message.chat.id, f"{dish.name}\n–¶–µ–Ω–∞: {dish.price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}")


    # –ö–Ω–æ–ø–∫–∏ "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞" –∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    markup.add(types.InlineKeyboardButton(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {total_price}", callback_data="total_price"))
    markup.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))

    bot.send_message(message.chat.id, "–í–∞—à–∏ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user = session.query(User).filter_by(telegram_id=call.from_user.id).first()
    orders = session.query(Order).filter_by(user_id=user.id, status='active').first()
    
    if call.data.startswith("increase_"):
        item_id = int(call.data.split("_")[1])
        order_item = session.query(OrderItem).filter_by(id=item_id).first()
        if order_item:
            order_item.quantity += 1
            session.commit()
    
    elif call.data.startswith("decrease_"):
        item_id = int(call.data.split("_")[1])
        order_item = session.query(OrderItem).filter_by(id=item_id).first()
        if order_item and order_item.quantity > 1:
            order_item.quantity -= 1
            session.commit()
    
    elif call.data.startswith("remove_"):
        item_id = int(call.data.split("_")[1])
        order_item = session.query(OrderItem).filter_by(id=item_id).first()
        if order_item:
            session.delete(order_item)
            session.commit()
    
    elif call.data == "checkout":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        bot.send_message(call.message.chat.id, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")

def create_order(user_id, items):
	session = Session()
	try:
		# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
		new_order = Order(user_id=user_id)
		session.add(new_order)
		session.flush()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID

		# –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞
		for item in items:
			order_item = OrderItem(order_id=new_order.id, item_id=item['item_id'], quantity=item['quantity'])
			session.add(order_item)

		session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
		return new_order.id
	except Exception as e:
		session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		print(f"Error occurred: {e}")
	finally:
		session.close()

@bot.callback_query_handler(func=lambda call: call.data == "checkout")
def handle_checkout(call):
	user_id = call.message.chat.id
	# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
	items_in_cart = [
		{'item_id': 1, 'quantity': 2},  # –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
		{'item_id': 2, 'quantity': 1},
	]

	order_id = create_order(user_id, items_in_cart)
	if order_id:
		bot.send_message(call.message.chat.id, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {}".format(order_id))
	else:
		bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
	# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
	show_cart(call.message)


        
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)