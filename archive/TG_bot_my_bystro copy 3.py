### –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (TG_bot_my_bystro.py)

import telebot
from telebot import types 
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func
import random
from models import session, Category, Dish, User, Order, OrderItem # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∏ –º–æ–¥–µ–ª–∏
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á
telegram_api_key = os.getenv('TELEGRAM_API_KEY')

# –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(telegram_api_key)

# –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
image_folder = os.path.join(os.getcwd(), 'My_bistro/image')
images = [os.path.join(image_folder, f) for f in os.listdir(image_folder) if f.endswith('.jpg')]

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_photo(message.chat.id, open(random.choice(images), 'rb'))  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_menu = telebot.types.KeyboardButton("–ú–µ–Ω—é")
    button_cart = telebot.types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞")
    button_profile = telebot.types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    
    markup.add(button_menu, button_cart, button_profile)
    
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ Menu
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def show_menu(message):
    markup = types.InlineKeyboardMarkup()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è InlineKeyboardMarkup

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    categories = session.query(Category).all()
    
    for category in categories:
        button = InlineKeyboardButton(category.name, callback_data=f'category_{category.id}')
        markup.add(button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def handle_back_to_menu(call):
    # –ó–¥–µ—Å—å –º—ã –≤—ã–∑—ã–≤–∞–µ–º show_menu –∏ –ø–µ—Ä–µ–¥–∞–µ–º call.message
    show_menu(call.message)
    
 
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def show_dishes(call):
    category_id = int(call.data.split('_')[1])
    dishes = session.query(Dish).filter(Dish.category_id == category_id).all()
    
    markup = InlineKeyboardMarkup()
    
    for dish in dishes:
        button = InlineKeyboardButton(f"{dish.name} - {dish.price:.2f}‚ÇΩ", callback_data=f'dish_{dish.id}')
        markup.add(button)
    
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=markup)


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ Dish –≤ —Ä–∞–º–∫–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã Menu
# # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (TG_bot_my_bystro.py)
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞

from sqlalchemy import func
from telebot import types

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±–ª—é–¥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('dish_'))
def handle_dish_call(call):
    dish_id = int(call.data.split('_')[1])
    dish = session.query(Dish).filter(Dish.id == dish_id).first()

    if dish:
        send_dish_info(call, dish)

def send_dish_info(call, dish):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑–µ
    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    order = session.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()

    quantity = 1  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if order:
        order_item = session.query(OrderItem).filter(OrderItem.order_id == order.id, OrderItem.dish_id == dish.id).first()
        if order_item:
            quantity = order_item.quantity

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª—é–¥–µ
    bot.send_message(call.message.chat.id, f"{dish.name}\n{dish.description}\n\n**–¶–µ–Ω–∞: {dish.price}**", parse_mode='Markdown')

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    update_quantity_markup(call.message.chat.id, call.message.message_id, dish.id, quantity)

def keyboard(dish_id, quantity, dish_price):
    quantity_markup = types.InlineKeyboardMarkup()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    row1 = [
        types.InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûï", callback_data=f'increase_quantity_{dish_id}'),
        types.InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûñ", callback_data=f'decrease_quantity_{dish_id}')
    ]
    quantity_markup.row(*row1)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    row2 = [
        types.InlineKeyboardButton(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {dish_price * quantity}", callback_data='dummy'),
        types.InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}", callback_data='dummy'),
        types.InlineKeyboardButton("üõí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_to_cart_{dish_id}_{quantity}')
    ]
    quantity_markup.row(*row2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫

    return quantity_markup

def update_quantity_markup(chat_id, message_id, dish_id, quantity):
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –±–ª—é–¥–∞
    dish = session.query(Dish).filter(Dish.id == dish_id).first()
    quantity_markup = keyboard(dish_id, quantity, dish.price)

    bot.edit_message_text("–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", chat_id=chat_id, message_id=message_id, reply_markup=quantity_markup)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('increase_quantity_'))
def increase_quantity(call):
    dish_id = int(call.data.split('_')[2])
    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    order = session.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()
    
    if not order:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    order_item = session.query(OrderItem).filter(OrderItem.order_id == order.id, OrderItem.dish_id == dish_id).first()
    
    if order_item:
        order_item.quantity += 1
    else:
        order_item = OrderItem(order_id=order.id, dish_id=dish_id, quantity=1)
        session.add(order_item)

    session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    quantity = order_item.quantity

    update_quantity_markup(call.message.chat.id, call.message.message_id, dish_id, quantity)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('decrease_quantity_'))
def decrease_quantity(call):
    dish_id = int(call.data.split('_')[2])
    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    order = session.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()
    
    if not order:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    order_item = session.query(OrderItem).filter(OrderItem.order_id == order.id, OrderItem.dish_id == dish_id).first()
    
    if order_item and order_item.quantity > 1:
        order_item.quantity -= 1
        session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        quantity = order_item.quantity
    else:
        return  # –ù–µ —É–º–µ–Ω—å—à–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ 1

    update_quantity_markup(call.message.chat.id, call.message.message_id, dish_id, quantity)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
def add_to_cart(call):
    dish_id, quantity = map(int, call.data.split('_')[2:])
    user = session.query(User).filter(User.telegram_id == call.from_user.id).first()
    order = session.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()

    if not order:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    order_item = session.query(OrderItem).filter(OrderItem.order_id == order.id, OrderItem.dish_id == dish_id).first()
    if order_item:
        order_item.quantity += quantity
    else:
        order_item = OrderItem(order_id=order.id, dish_id=dish_id, quantity=quantity)
        session.add(order_item)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    total_price = session.query(func.sum(OrderItem.quantity * Dish.price)).join(Dish).filter(OrderItem.order_id == order.id).scalar() or 0
    order.total_price = total_price
    session.commit()

    bot.send_message(call.message.chat.id, "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)