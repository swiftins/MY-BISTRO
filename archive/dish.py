### bot.py


import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from sqlalchemy.orm import sessionmaker
from models.py import Dish, Order, OrderItem, Session

bot = telebot.TeleBot('YOUR_TELEGRAM_BOT_API_TOKEN')
session = Session()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
current_orders = {}

@bot.message_handler(commands=['menu'])
def menu(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = InlineKeyboardMarkup()
    for i in range(40):
        markup.add(InlineKeyboardButton(text="", callback_data=f"button_{i}"))
    bot.send_message(message.chat.id, "–ú–µ–Ω—é", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_dish_selection(call):
    # –ü–æ–ª—É—á–∞–µ–º id –±–ª—é–¥–∞ –∏–∑ callback_data
    dish_id = int(call.data.split('_')[1])  # –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å id –±–ª—é–¥–∞
    dish = session.query(Dish).filter(Dish.id == dish_id).first()

    if not current_orders.get(call.from_user.id):
        order = Order()
        session.add(order)
        session.commit()
        current_orders[call.from_user.id] = order.id

    order_id = current_orders[call.from_user.id]

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ
    category_button = InlineKeyboardButton(text=f"‚Ü©Ô∏è {dish.category.name}", callback_data=f"back_to_menu")
    markup = InlineKeyboardMarkup()
    markup.add(category_button)

    if dish.photo:
        bot.send_photo(call.message.chat.id, dish.photo)

    bot.send_message(call.message.chat.id, f"{dish.name}\n{dish.description}\n\n"
                                            f"*–¶–µ–Ω–∞: {dish.price}*", parse_mode='Markdown', reply_markup=markup)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    quantity = 1  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total_price = dish.price * quantity

    quantity_markup = InlineKeyboardMarkup()
    quantity_markup.add(
        InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûï", callback_data=f"increase_{dish.id}"),
        InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}", callback_data=f"quantity_{dish.id}_{quantity}"),
        InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûñ", callback_data=f"decrease_{dish.id}"),
        InlineKeyboardButton(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}", callback_data=f"total_{dish.id}_{total_price}"),
    )
    quantity_markup.add(InlineKeyboardButton("üõí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{dish.id}_{quantity}"))

    bot.send_message(call.message.chat.id, "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", reply_markup=quantity_markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('increase_'))
def increase_quantity(call):
    dish_id = int(call.data.split('_')[1])
    # –õ–æ–≥–∏–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith('decrease_'))
def decrease_quantity(call):
    dish_id = int(call.data.split('_')[1])
    # –õ–æ–≥–∏–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
def add_to_cart(call):
    dish_id, quantity = map(int, call.data.split('_')[2:])
    order_id = current_orders[call.from_user.id]
    order_item = OrderItem(order_id=order_id, dish_id=dish_id, quantity=quantity)
    session.add(order_item)
    session.commit()

    # –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    total_order_price = sum(item.dish.price * item.quantity for item in session.query(OrderItem).filter(OrderItem.order_id == order_id))
    bot.send_message(call.message.chat.id, f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {total_order_price}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_menu'))
def back_to_menu(call):
    menu(call.message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
